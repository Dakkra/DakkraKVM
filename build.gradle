import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'application'
    id 'cpp'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'idea'
}

group 'com.dakkra'
version '1.0-SNAPSHOT'

//Gradle 6.3
application {
    mainClassName = 'com.dakkra.kvm.DakkraKVM'
}

repositories {
    mavenCentral()
}

javafx {
    modules = ['javafx.controls']
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/lowLevelInput/shared").absolutePath
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        lowLevelInput(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cppCompiler.args '-I', "${Jvm.current().javaHome}/include/darwin"
                    cppCompiler.args '-mmacosx-version-min=10.9'
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cppCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
                    cppCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${Jvm.current().javaHome}/include"
                    cppCompiler.args "-I${Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                }
            }
        }
    }
}

task delLibraries(type: Delete) {
    delete("src/main/resources/lowLevelInput.dll")
    delete("src/main/resources/liblowLevelInput.dylib")
}

task copyNatives(type: Copy) {
    from("${buildDir}/libs/lowLevelInput/shared/lowLevelInput.dll")
    into("src/main/resources")
    from("${buildDir}/libs/lowLevelInput/shared/liblowLevelInput.dylib")
    into("src/main/resources")
}
copyNatives.dependsOn('lowLevelInputSharedLibrary')

test.dependsOn 'lowLevelInputSharedLibrary'
processResources.dependsOn('copyNatives')
clean.dependsOn("delLibraries")